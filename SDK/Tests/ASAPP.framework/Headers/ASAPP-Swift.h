// Generated by Apple Swift version 4.0 (swiftlang-900.0.65.2 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("ASAPP")
@class ASAPPConfig;
@class ASAPPUser;
@class ASAPPStyles;
@class ASAPPStrings;
@class ASAPPViews;
enum ASAPPLogLevel : NSInteger;

/// The <code>ASAPP</code> class holds references to its various configurable properties and allows you
/// to call various functions. No instances of <code>ASAPP</code> are to be created.
SWIFT_CLASS("_TtC5ASAPP5ASAPP")
@interface ASAPP : NSObject
/// Set by calling <code>ASAPP.initialize(with:)</code>, typically in the <code>AppDelegate</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ASAPPConfig * _Null_unspecified config;)
+ (ASAPPConfig * _Null_unspecified)config SWIFT_WARN_UNUSED_RESULT;
/// The current user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ASAPPUser * _Null_unspecified user;)
+ (ASAPPUser * _Null_unspecified)user SWIFT_WARN_UNUSED_RESULT;
+ (void)setUser:(ASAPPUser * _Null_unspecified)value;
/// The SDK can be styled to fit your brand.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ASAPPStyles * _Nonnull styles;)
+ (ASAPPStyles * _Nonnull)styles SWIFT_WARN_UNUSED_RESULT;
+ (void)setStyles:(ASAPPStyles * _Nonnull)value;
/// Strings displayed by the SDK can be customized.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ASAPPStrings * _Nonnull strings;)
+ (ASAPPStrings * _Nonnull)strings SWIFT_WARN_UNUSED_RESULT;
+ (void)setStrings:(ASAPPStrings * _Nonnull)value;
/// Certain views displayed by the SDK can be customized.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) ASAPPViews * _Nonnull views;)
+ (ASAPPViews * _Nonnull)views SWIFT_WARN_UNUSED_RESULT;
+ (void)setViews:(ASAPPViews * _Nonnull)value;
/// Verbosity of the debugging log. Defaults to <code>.errors</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ASAPPLogLevel debugLogLevel;)
+ (enum ASAPPLogLevel)debugLogLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setDebugLogLevel:(enum ASAPPLogLevel)value;
/// Sets the <code>config</code> property and loads built-in fonts, if necessary.
/// \param config An <code>ASAPPConfig</code> instance used to configure the SDK.
///
+ (void)initializeWith:(ASAPPConfig * _Nonnull)config;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;
@class ASAPPButton;

@interface ASAPP (SWIFT_EXTENSION(ASAPP))
/// Creates a chat view controller, ready to be pushed onto a navigation stack.
/// \param userInfo A user info dictionary containing notification metadata
///
/// \param appCallbackHandler An <code>ASAPPCallbackHandler</code>
///
///
/// returns:
/// A <code>UIViewController</code>
+ (UIViewController * _Nonnull)createChatViewControllerForPushingFromNotificationWith:(NSDictionary * _Nullable)userInfo appCallbackHandler:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable))appCallbackHandler SWIFT_WARN_UNUSED_RESULT;
/// Creates a chat view controller in a navigation controller, ready to be presented modally.
/// \param userInfo A user info dictionary containing notification metadata
///
/// \param appCallbackHandler An <code>ASAPPCallbackHandler</code>
///
///
/// returns:
/// A <code>UIViewController</code>
+ (UIViewController * _Nonnull)createChatViewControllerForPresentingFromNotificationWith:(NSDictionary * _Nullable)userInfo appCallbackHandler:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable))appCallbackHandler SWIFT_WARN_UNUSED_RESULT;
/// Creates a chat view controller in a navigation controller, ready to be presented modally.
/// warning:
/// Deprecated in 3.0.0. Use <code>createChatViewControllerForPresenting(fromNotificationWith:appCallbackHandler:)</code> instead.
/// \param userInfo A user info dictionary containing notification metadata
///
/// \param appCallbackHandler An <code>ASAPPCallbackHandler</code>
///
///
/// returns:
/// A <code>UIViewController</code>
+ (UIViewController * _Nonnull)createChatViewControllerFromNotificationWith:(NSDictionary * _Nullable)userInfo appCallbackHandler:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable))appCallbackHandler SWIFT_WARN_UNUSED_RESULT;
/// Creates a button that will launch the SDK when tapped. Configure the segue style
/// by setting the <code>ASAPPStyles.segue</code> property.
/// \param appCallbackHandler An <code>ASAPPCallbackHandler</code>
///
/// \param presentingViewController The <code>UIViewController</code> which will either present or push onto its navigation controller the SDK’s view controller.
///
///
/// returns:
/// An <code>ASAPPButton</code>
+ (ASAPPButton * _Nonnull)createChatButtonWithAppCallbackHandler:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable))appCallbackHandler presentingViewController:(UIViewController * _Nonnull)presentingViewController SWIFT_WARN_UNUSED_RESULT;
/// \param userInfo A user info dictionary containing notification metadata
///
///
/// returns:
/// Whether the SDK can handle a notification.
+ (BOOL)canHandleNotificationWith:(NSDictionary * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
@end


@interface ASAPP (SWIFT_EXTENSION(ASAPP))
/// The key for referencing an auth token in a request context dictionary.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull authTokenKey;)
+ (NSString * _Nonnull)authTokenKey SWIFT_WARN_UNUSED_RESULT;
/// The SDK version.
///
/// returns:
/// A <code>String</code> representing the SDK version in x.y.z format.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clientVersion;)
+ (NSString * _Nonnull)clientVersion SWIFT_WARN_UNUSED_RESULT;
@end


@interface ASAPP (SWIFT_EXTENSION(ASAPP))
/// Loads the SDK’s built-in fonts.
+ (void)loadFonts;
@end


@interface ASAPP (SWIFT_EXTENSION(ASAPP))
/// :nodoc:
+ (BOOL)isDemoContentEnabled SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
+ (void)setDemoContentEnabled:(BOOL)enabled;
@end



@class NSCoder;

/// An <code>ASAPPButton</code> will launch the SDK, showing the view controller based on the configured segue.
/// Create one using <code>ASAPP.createChatButton(appCallbackHandler:presentingViewController:)</code>.
SWIFT_CLASS("_TtC5ASAPP11ASAPPButton")
@interface ASAPPButton : UIView
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Lays out subviews. Just as with <code>UIView.layoutSubviews()</code>, you should not call this method directly.
- (void)layoutSubviews;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end







@class UITouch;
@class UIEvent;

@interface ASAPPButton (SWIFT_EXTENSION(ASAPP))
/// Overrides <code>UIView.touchesBegan(_:with:)</code>.
/// \param touches A set of <code>UITouch</code> instances that represent the touches for the starting phase of the event, which is represented by event. For touches in a view, this set contains only one touch by default. To receive multiple touches, you must set the view’s <code>isMultipleTouchEnabled</code> property to true.
///
/// \param event The event to which the touches belong.
///
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Overrides <code>UIView.touchesMoved(_:with:)</code>.
/// \param touches A set of <code>UITouch</code> instances that represent the touches for the starting phase of the event, which is represented by event. For touches in a view, this set contains only one touch by default. To receive multiple touches, you must set the view’s <code>isMultipleTouchEnabled</code> property to true.
///
/// \param event The event to which the touches belong.
///
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Overrides <code>UIView.touchesEnded(_:with:)</code>.
/// \param touches A set of <code>UITouch</code> instances that represent the touches for the starting phase of the event, which is represented by event. For touches in a view, this set contains only one touch by default. To receive multiple touches, you must set the view’s <code>isMultipleTouchEnabled</code> property to true.
///
/// \param event The event to which the touches belong.
///
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Overrides <code>UIView.touchesCancelled(_:with:)</code>.
/// \param touches A set of <code>UITouch</code> instances that represent the touches for the starting phase of the event, which is represented by event. For touches in a view, this set contains only one touch by default. To receive multiple touches, you must set the view’s <code>isMultipleTouchEnabled</code> property to true.
///
/// \param event The event to which the touches belong.
///
- (void)touchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;
@end

@class UIColor;

/// Used for configuring the styles of a button. For example, assign an instance to <code>ASAPPColors.quickReplyButton</code>.
SWIFT_CLASS("_TtC5ASAPP17ASAPPButtonColors")
@interface ASAPPButtonColors : NSObject
/// The color of the button’s background.
@property (nonatomic, strong) UIColor * _Nonnull backgroundNormal;
/// The color of the button’s background when tapped or otherwise highlighted.
@property (nonatomic, strong) UIColor * _Nonnull backgroundHighlighted;
/// The color of the button’s background when disabled.
@property (nonatomic, strong) UIColor * _Nonnull backgroundDisabled;
/// The color of the button’s text.
@property (nonatomic, strong) UIColor * _Nonnull textNormal;
/// The color of the button’s text when tapped or otherwise highlighted.
@property (nonatomic, strong) UIColor * _Nonnull textHighlighted;
/// The color of the button’s text when disabled.
@property (nonatomic, strong) UIColor * _Nonnull textDisabled;
/// The color of the button’s border.
@property (nonatomic, strong) UIColor * _Nullable border;
/// Creates an instance of <code>ASAPPButtonColors</code> with the given properties.
/// \param backgroundNormal The normal background color.
///
/// \param backgroundHighlighted The highlighted background color.
///
/// \param backgroundDisabled The disabled background color.
///
/// \param textNormal The normal text color.
///
/// \param textHighlighted The highlighted text color.
///
/// \param border The border color. Optional.
///
- (nonnull instancetype)initWithBackgroundNormal:(UIColor * _Nonnull)backgroundNormal backgroundHighlighted:(UIColor * _Nonnull)backgroundHighlighted backgroundDisabled:(UIColor * _Nonnull)backgroundDisabled textNormal:(UIColor * _Nonnull)textNormal textHighlighted:(UIColor * _Nonnull)textHighlighted textDisabled:(UIColor * _Nonnull)textDisabled border:(UIColor * _Nullable)border OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of <code>ASAPPButtonColors</code> with a text color. Highlighted and disabled text colors
/// are automatically generated. Background colors are set to <code>UIColor.clear</code>.
/// \param textColor The normal text color.
///
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of <code>ASAPPButtonColors</code> with a background and text color. A highlighted background
/// color and a disabled text color are automatically generated.
/// \param backgroundColor The background color.
///
/// \param textColor The text color.
///
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor textColor:(UIColor * _Nonnull)textColor OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of <code>ASAPPButtonColors</code> with a background, text, and border color. A highlighted
/// background and disabled text color are automatically generated.
/// \param backgroundColor The background color.
///
/// \param textColor The text color.
///
/// \param borderColor The border color. Optional.
///
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor textColor:(UIColor * _Nonnull)textColor border:(UIColor * _Nullable)border OBJC_DESIGNATED_INITIALIZER;
/// Creates an instance of <code>ASAPPButtonColors</code> with a background color. A highlighted and a disabled background
/// color are automatically generated. The text color is automatically set to <code>UIColor.white</code>.
/// \param backgroundColor The background color.
///
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class ASAPPInputColors;

/// Configurable colors for various parts of the SDK.
SWIFT_CLASS("_TtC5ASAPP11ASAPPColors")
@interface ASAPPColors : NSObject
/// The background color of the navigation bar.
@property (nonatomic, strong) UIColor * _Nonnull navBarBackground;
/// The color of the navigation bar title text.
@property (nonatomic, strong) UIColor * _Nonnull navBarTitle;
/// The color of text in navigation bar buttons in the chat view with <code>ASAPPNavBarButtonStyle.text</code>, as well as the color of the close/back button.
@property (nonatomic, strong) UIColor * _Nonnull navBarButton;
/// The color of text in navigation bar buttons with <code>ASAPPNavBarButtonStyle.bubble</code>.
@property (nonatomic, strong) UIColor * _Nonnull navBarButtonForeground;
/// The color of the background in navigation bar buttons with <code>ASAPPNavBarButtonStyle.bubble</code>.
@property (nonatomic, strong) UIColor * _Nonnull navBarButtonBackground;
/// The color of the background of most elements.
@property (nonatomic, strong) UIColor * _Nonnull backgroundPrimary;
/// The color of the background of image views, tabs, and other secondary elements.
@property (nonatomic, strong) UIColor * _Nonnull backgroundSecondary;
/// The color of most text.
@property (nonatomic, strong) UIColor * _Nonnull textPrimary;
/// The color of secondary text, such as timestamp labels.
@property (nonatomic, strong) UIColor * _Nonnull textSecondary;
/// The color of most separators.
@property (nonatomic, strong) UIColor * _Nonnull separatorPrimary;
/// The color of secondary separators, such as the borders of quick reply buttons, checkboxes, and tabs.
@property (nonatomic, strong) UIColor * _Nonnull separatorSecondary;
/// The color of the active portion of controls, such as checkboxes, progress bars, radio buttons, sliders, and tabs.
@property (nonatomic, strong) UIColor * _Nonnull controlTint;
/// The color of the secondary portion of some controls, such as the background of progress bars and the underline of text inputs.
@property (nonatomic, strong) UIColor * _Nonnull controlSecondary;
/// The color of the background of selected checkboxes and radio buttons.
@property (nonatomic, strong) UIColor * _Nonnull controlSelectedBackground;
/// The color of text buttons, usually an accent color.
@property (nonatomic, strong) ASAPPButtonColors * _Nonnull textButtonPrimary;
/// The color of secondary text buttons, usually a muted color.
@property (nonatomic, strong) ASAPPButtonColors * _Nonnull textButtonSecondary;
/// The colors of block-style buttons for primary actions, usually an accent color.
@property (nonatomic, strong) ASAPPButtonColors * _Nonnull buttonPrimary;
/// The colors of block-style buttons for secondary actions like cancelling, usually a muted color.
@property (nonatomic, strong) ASAPPButtonColors * _Nonnull buttonSecondary;
/// The color of the background of the chat messages view.
@property (nonatomic, strong) UIColor * _Nonnull messagesListBackground;
/// The color of chat message text.
@property (nonatomic, strong) UIColor * _Nonnull messageText;
/// The color of the background of chat messages sent by the user.
@property (nonatomic, strong) UIColor * _Nonnull messageBackground;
/// The color of the border of chat messages sent by the user.
@property (nonatomic, strong) UIColor * _Nullable messageBorder;
/// The color of chat message reply text.
@property (nonatomic, strong) UIColor * _Nonnull replyMessageText;
/// The color of the background of chat message replies.
@property (nonatomic, strong) UIColor * _Nonnull replyMessageBackground;
/// The color of the border of chat message replies.
@property (nonatomic, strong) UIColor * _Nullable replyMessageBorder;
/// The color of the background of the quick replies list.
@property (nonatomic, strong) UIColor * _Nonnull quickRepliesBackground;
/// Whether the quick replies list has a patterned background.
@property (nonatomic) BOOL quickRepliesBackgroundPattern;
/// The colors of quick reply buttons.
@property (nonatomic, strong) ASAPPButtonColors * _Nonnull quickReplyButton;
/// The colors of the chat input text area.
@property (nonatomic, strong) ASAPPInputColors * _Nonnull chatInput;
/// The color of the navigation bar of the predictive view.
@property (nonatomic, strong) UIColor * _Nullable predictiveNavBarBackground;
/// The color of the title text of the navigation bar of the predictive view.
@property (nonatomic, strong) UIColor * _Nonnull predictiveNavBarTitle;
/// The color of text in navigation bar buttons in the predictive view with <code>ASAPPNavBarButtonStyle.text</code>, as well as the color of the close/back button.
@property (nonatomic, strong) UIColor * _Nonnull predictiveNavBarButton;
/// The color of text in navigation bar buttons in the predictive view with <code>ASAPPNavBarButtonStyle.bubble</code>.
@property (nonatomic, strong) UIColor * _Nonnull predictiveNavBarButtonForeground;
/// The color of the background of navigation bar buttons in the predictive view with <code>ASAPPNavBarButtonStyle.bubble</code>.
@property (nonatomic, strong) UIColor * _Nonnull predictiveNavBarButtonBackground;
/// The color of the top of the background gradient of the predictive view.
@property (nonatomic, strong) UIColor * _Nonnull predictiveGradientTop;
/// The color of the middle of the background gradient of the predictive view.
@property (nonatomic, strong) UIColor * _Nonnull predictiveGradientMiddle;
/// The color of the bottom of the background gradient of the predictive view.
@property (nonatomic, strong) UIColor * _Nonnull predictiveGradientBottom;
/// The color of most text in the predictive view, including <code>ASAPPStrings.predictiveTitle</code> and <code>ASAPPStrings.predictiveWelcomeText</code>.
@property (nonatomic, strong) UIColor * _Nonnull predictiveTextPrimary;
/// The color of secondary text in the predictive view, namely <code>ASAPPStrings.predictiveOtherSuggestions</code>.
@property (nonatomic, strong) UIColor * _Nonnull predictiveTextSecondary;
/// The colors of primary buttons in the predictive view.
@property (nonatomic, strong) ASAPPButtonColors * _Nonnull predictiveButtonPrimary;
/// The colors of secondary buttons in the predictive view.
@property (nonatomic, strong) ASAPPButtonColors * _Nonnull predictiveButtonSecondary;
/// The colors of the input text area in the predictive view.
@property (nonatomic, strong) ASAPPInputColors * _Nonnull predictiveInput;
/// The color of text in an <code>ASAPPButton</code>.
@property (nonatomic, strong) UIColor * _Nonnull helpButtonText;
/// The color of the background of an <code>ASAPPButton</code>.
@property (nonatomic, strong) UIColor * _Nonnull helpButtonBackground;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Configuration for the SDK’s connection to the API.
SWIFT_CLASS("_TtC5ASAPP11ASAPPConfig")
@interface ASAPPConfig : NSObject
/// Your app identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
/// Host name for connecting to the API.
@property (nonatomic, readonly, copy) NSString * _Nonnull apiHostName;
/// Your app’s client secret.
@property (nonatomic, readonly, copy) NSString * _Nonnull clientSecret;
/// Creates an instance of <code>ASAPPConfig</code> with the given parameters.
/// \param appId Your app identifier. Also known as the company marker.
///
/// \param apiHostName Host name for connecting to the API.
///
/// \param clientSecret Your app’s client secret used when connecting to the API.
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId apiHostName:(NSString * _Nonnull)apiHostName clientSecret:(NSString * _Nonnull)clientSecret OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




@interface ASAPPConfig (SWIFT_EXTENSION(ASAPP))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

@class UIFont;

/// Represents a font family used by default styles. Individual <code>ASAPPTextStyle</code>s will override the font family given to <code>ASAPPStyles.stylesForAppId(_:fontFamily:)</code>.
SWIFT_CLASS("_TtC5ASAPP15ASAPPFontFamily")
@interface ASAPPFontFamily : NSObject
/// The lightest weight.
@property (nonatomic, readonly, strong) UIFont * _Nonnull light;
/// The second-lightest weight, used for body text.
@property (nonatomic, readonly, strong) UIFont * _Nonnull regular;
/// The second-heaviest weight.
@property (nonatomic, readonly, strong) UIFont * _Nonnull medium;
/// The heaviest weight.
@property (nonatomic, readonly, strong) UIFont * _Nonnull bold;
/// Creates an <code>ASAPPFontFamily</code> instance given the <code>UIFont</code> for each weight.
/// \param light A light-weight <code>UIFont</code>.
///
/// \param regular A regular-weight <code>UIFont</code>.
///
/// \param medium A medium-weight or semi-bold <code>UIFont</code>.
///
/// \param bold A heavy-weight <code>UIFont</code>.
///
- (nonnull instancetype)initWithLight:(UIFont * _Nonnull)light regular:(UIFont * _Nonnull)regular medium:(UIFont * _Nonnull)medium bold:(UIFont * _Nonnull)bold OBJC_DESIGNATED_INITIALIZER;
/// Creates an <code>ASAPPFontFamily</code> instance representing the SDK’s default font family.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Used to configure the colors of text input area in the predictive view and chat view.
SWIFT_CLASS("_TtC5ASAPP16ASAPPInputColors")
@interface ASAPPInputColors : NSObject
/// The color of the background of the input area.
@property (nonatomic, strong) UIColor * _Nonnull background;
/// The color of the text.
@property (nonatomic, strong) UIColor * _Nonnull text;
/// The color of the placeholder text, visible before anything has been typed.
@property (nonatomic, strong) UIColor * _Nonnull placeholderText;
/// The tint color of the text area (used by the cursor).
@property (nonatomic, strong) UIColor * _Nonnull tint;
/// The color of the border of the text area.
@property (nonatomic, strong) UIColor * _Nullable border;
/// The color of the “Send” text button.
@property (nonatomic, strong) UIColor * _Nonnull primaryButton;
/// The color of the media attachment button.
@property (nonatomic, strong) UIColor * _Nonnull secondaryButton;
/// Creates an instance of <code>ASAPPInputColors</code> with the given parameters.
/// \param background The background color.
///
/// \param placeholderText The placeholder text color.
///
/// \param tint The tint color.
///
/// \param border The border color.
///
/// \param primaryButton The primary button color.
///
/// \param secondaryButton The secondary button color.
///
- (nonnull instancetype)initWithBackground:(UIColor * _Nonnull)background text:(UIColor * _Nonnull)text placeholderText:(UIColor * _Nonnull)placeholderText tint:(UIColor * _Nonnull)tint border:(UIColor * _Nullable)border primaryButton:(UIColor * _Nonnull)primaryButton secondaryButton:(UIColor * _Nonnull)secondaryButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// Represents the verbosity level of the debugging log.
typedef SWIFT_ENUM(NSInteger, ASAPPLogLevel) {
/// Silence.
  ASAPPLogLevelNone = 0,
/// Prints only errors.
  ASAPPLogLevelErrors = 1,
/// Prints only warnings.
  ASAPPLogLevelWarning = 2,
/// Prints most debugging information.
  ASAPPLogLevelDebug = 3,
/// The highest level. Prints everything, including very long messages.
  ASAPPLogLevelInfo = 4,
};

@class UIImage;

/// Used to define an icon for a navigation bar button.
SWIFT_CLASS("_TtC5ASAPP22ASAPPNavBarButtonImage")
@interface ASAPPNavBarButtonImage : NSObject
/// The button image.
@property (nonatomic, strong) UIImage * _Nonnull image;
/// The size of the image.
@property (nonatomic) CGSize size;
/// The insets of the button.
@property (nonatomic) UIEdgeInsets insets;
/// Creates an instance of <code>ASAPPNavBarButtonImage</code> with the given parameters.
/// \param image The button image.
///
/// \param size The size of the image.
///
/// \param insets The button insets. Optional.
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image size:(CGSize)size insets:(UIEdgeInsets)insets OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Customizable images for navigation bar buttons.
SWIFT_CLASS("_TtC5ASAPP23ASAPPNavBarButtonImages")
@interface ASAPPNavBarButtonImages : NSObject
/// The close button appears in the top right when the view controller is presented modally. Defaults to an ✕.
@property (nonatomic, strong) ASAPPNavBarButtonImage * _Nullable close;
/// The back button appears in the top left when the view controller is pushed into a navigation stack. Defaults to a ‹.
@property (nonatomic, strong) ASAPPNavBarButtonImage * _Nullable back;
/// The ask button appears in the chat view when not chatting with an agent.
@property (nonatomic, strong) ASAPPNavBarButtonImage * _Nullable ask;
/// The back to chat button appears in the predictive view.
@property (nonatomic, strong) ASAPPNavBarButtonImage * _Nullable backToChat;
/// The end chat button appears in the chat view when chatting with an agent.
@property (nonatomic, strong) ASAPPNavBarButtonImage * _Nullable end;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents the style of button in the SDK’s navigation bar.
typedef SWIFT_ENUM(NSInteger, ASAPPNavBarButtonStyle) {
/// The button will appear as text inside a bubble shape.
  ASAPPNavBarButtonStyleBubble = 0,
/// The button will appear as text without a background.
  ASAPPNavBarButtonStyleText = 1,
};


/// Customizable navigation bar styles.
SWIFT_CLASS("_TtC5ASAPP17ASAPPNavBarStyles")
@interface ASAPPNavBarStyles : NSObject
/// The style of navigation bar buttons. Defaults to <code>ASAPPNavBarButtonStyle.bubble</code>.
@property (nonatomic) enum ASAPPNavBarButtonStyle buttonStyle;
/// The images used in navigation bar buttons.
@property (nonatomic, strong) ASAPPNavBarButtonImages * _Nonnull buttonImages;
/// The edge insets for the navigation bar title. Defaults to 8 on the sides.
@property (nonatomic) UIEdgeInsets titlePadding;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents the kind of segue used by <code>ASAPPButton</code> to show the SDK’s view controller.
typedef SWIFT_ENUM(NSInteger, ASAPPSegue) {
/// Present the view controller modally.
  ASAPPSeguePresent = 0,
/// Push the view controller onto the navigation stack.
  ASAPPSeguePush = 1,
};


/// Customizable strings for various parts of the UI.
SWIFT_CLASS("_TtC5ASAPP12ASAPPStrings")
@interface ASAPPStrings : NSObject
/// The text of an <code>ASAPPButton</code>.
@property (nonatomic, copy) NSString * _Nonnull asappButton;
/// The accessibility label for the close/back button.
@property (nonatomic, copy) NSString * _Nonnull accessibilityClose;
/// The title for the predictive view. Overridden by <code>ASAPPViews.predictiveTitle</code>. Defaults to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable predictiveTitle;
/// The text for the button that displays the chat view.
@property (nonatomic, copy) NSString * _Nonnull predictiveBackToChatButton;
/// The welcome text in the predictive view.
@property (nonatomic, copy) NSString * _Nonnull predictiveWelcomeText;
/// The text for the subheader displayed below the welcome text.
@property (nonatomic, copy) NSString * _Nonnull predictiveOtherSuggestions;
/// The placeholder text for the input field of the predictive view.
@property (nonatomic, copy) NSString * _Nonnull predictiveInputPlaceholder;
/// The text for the send button of the predictive view.
@property (nonatomic, copy) NSString * _Nonnull predictiveSendButton;
/// The text displayed when no connection is available in the predictive view.
@property (nonatomic, copy) NSString * _Nonnull predictiveNoConnectionText;
/// The text displayed in the chat view when a connection has been established.
@property (nonatomic, copy) NSString * _Nonnull connectionBannerConnected;
/// The text displayed in the chat view when a connection is being established.
@property (nonatomic, copy) NSString * _Nonnull connectionBannerConnecting;
/// The text displayed in the chat view when there is no connection available.
@property (nonatomic, copy) NSString * _Nonnull connectionBannerDisconnected;
/// The title for the chat view. Overridden by <code>ASAPPViews.chatTitle</code>. Defaults to <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable chatTitle;
/// The text for the header displayed when there is no chat history.
@property (nonatomic, copy) NSString * _Nonnull chatEmptyTitle;
/// The text for the message displayed when there is no chat history.
@property (nonatomic, copy) NSString * _Nonnull chatEmptyMessage;
/// The text for the navigation bar button that appears in the chat view when not chatting with an agent. When tapped, it shows the predictive view. Overridden by <code>ASAPPNavBarButtonImages.ask</code>.
@property (nonatomic, copy) NSString * _Nonnull chatAskNavBarButton;
/// The text for the navigation bar button that appears in the chat view when chatting with an agent. When tapped, it ends the chat. Overridden by <code>ASAPPNavBarButtonImages.end</code>.
@property (nonatomic, copy) NSString * _Nonnull chatEndChatNavBarButton;
/// The placeholder text for the input field of the chat view.
@property (nonatomic, copy) NSString * _Nonnull chatInputPlaceholder;
/// The text for the send button of the chat view.
@property (nonatomic, copy) NSString * _Nonnull chatInputSend;
/// The text displayed when the screen contents are hidden.
@property (nonatomic, copy) NSString * _Nonnull secureScreenCoverText;
/// The title displayed when a request fails to send.
@property (nonatomic, copy) NSString * _Nonnull requestErrorGenericFailureTitle;
/// The text displayed when a request fails to send.
@property (nonatomic, copy) NSString * _Nonnull requestErrorGenericFailure;
/// The text for the dismiss button of a generic error alert.
@property (nonatomic, copy) NSString * _Nonnull alertDismissButton;
/// The text displayed when a view could not load.
@property (nonatomic, copy) NSString * _Nonnull failureToLoadScreen;
/// The text for the retry button displayed when a view could not load.
@property (nonatomic, copy) NSString * _Nonnull failureToLoadScreenReloadButton;
/// The text for the close button displayed when a view could not load.
@property (nonatomic, copy) NSString * _Nonnull failureToLoadScreenCloseButton;
/// The title for the alert displayed when ending chat.
@property (nonatomic, copy) NSString * _Nonnull endChatConfirmationTitle;
/// The text for the alert displayed when ending chat.
@property (nonatomic, copy) NSString * _Nonnull endChatConfirmationMessage;
/// The text for the confirmation button of the end chat alert.
@property (nonatomic, copy) NSString * _Nonnull endChatConfirmationEndChatButton;
/// The text for the cancel button of the end chat alert.
@property (nonatomic, copy) NSString * _Nonnull endChatConfirmationCancelButton;
/// The title for the feedback form.
@property (nonatomic, copy) NSString * _Nonnull feedbackViewTitle;
/// The text prompting the user to indicate whether their issues was resolved.
@property (nonatomic, copy) NSString * _Nonnull feedbackIssueResolutionPrompt;
/// The text indicating that the issue was resolved.
@property (nonatomic, copy) NSString * _Nonnull feedbackIssueResolutionYes;
/// The text indicating that the issue was not resolved.
@property (nonatomic, copy) NSString * _Nonnull feedbackIssueResolutionNo;
/// The text prompting the user to leave feedback, shown as a placeholder in the text area.
@property (nonatomic, copy) NSString * _Nonnull feedbackPrompt;
/// The text displayed when a rating was no chosen.
@property (nonatomic, copy) NSString * _Nonnull feedbackMissingRatingError;
/// The text displayed when the rating was sent successfully.
@property (nonatomic, copy) NSString * _Nonnull feedbackSentSuccessMessage;
/// The text displayed when a request can’t be sent because there is no connection available.
@property (nonatomic, copy) NSString * _Nonnull requestErrorMessageNoConnection;
/// The text for the cancel button of the modal.
@property (nonatomic, copy) NSString * _Nonnull modalViewCancelButton;
/// The text for the submit button of the modal.
@property (nonatomic, copy) NSString * _Nonnull modalViewSubmitButton;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nonnull modalViewDoneButton;
/// The title of the alert shown when camera permission is not granted.
@property (nonatomic, copy) NSString * _Nonnull cameraPermissionsErrorTitle;
/// The text of the alert shown when camera permission is not granted.
@property (nonatomic, copy) NSString * _Nonnull cameraPermissionsErrorMessage;
/// The text for the cancel button of the alert shown when camera permission is not granted.
@property (nonatomic, copy) NSString * _Nonnull cameraPermissionsErrorCancelButton;
/// The text for the go-to-settings button of the alert shown when camera permission is not granted.
@property (nonatomic, copy) NSString * _Nonnull cameraPermissionsErrorSettingsButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ASAPPTextStyles;

/// Holds customizable styles and other visual SDK settings.
SWIFT_CLASS("_TtC5ASAPP11ASAPPStyles")
@interface ASAPPStyles : NSObject
/// Customizable text styles.
@property (nonatomic, strong) ASAPPTextStyles * _Nonnull textStyles;
/// Customizable colors.
@property (nonatomic, strong) ASAPPColors * _Nonnull colors;
/// The width of the stroke of separators such as timestamp headers and chat bubble borders.
@property (nonatomic) CGFloat separatorStrokeWidth;
/// How the SDK’s view controller is displayed by an <code>ASAPPButton</code>.
@property (nonatomic) enum ASAPPSegue segue;
/// Customizable navigation bar styles.
@property (nonatomic, strong) ASAPPNavBarStyles * _Nonnull navBarStyles;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface ASAPPStyles (SWIFT_EXTENSION(ASAPP))
/// Applies the SDK’s default font family to per-app style presets.
/// \param appId A <code>String</code> identifying your app.
///
///
/// returns:
/// An instance of <code>ASAPPStyles</code>.
+ (ASAPPStyles * _Nonnull)stylesForAppId:(NSString * _Nonnull)appId SWIFT_WARN_UNUSED_RESULT;
/// Applies a custom font family to per-app style presets.
/// \param appId A <code>String</code> identifying your app.
///
/// \param fontFamily An <code>ASAPPFontFamily</code> instance. Optional.
///
///
/// returns:
/// An instance of <code>ASAPPStyles</code>.
+ (ASAPPStyles * _Nonnull)stylesForAppId:(NSString * _Nonnull)appId fontFamily:(ASAPPFontFamily * _Nullable)fontFamily SWIFT_WARN_UNUSED_RESULT;
@end


/// Used to define a text style.
SWIFT_CLASS("_TtC5ASAPP14ASAPPTextStyle")
@interface ASAPPTextStyle : NSObject
/// Creates an instance of <code>ASAPPTextStyle</code> with the given parameters.
/// \param font The font.
///
/// \param size The default size.
///
/// \param letterSpacing The amount of space between characters.
///
/// \param color The text color.
///
- (nonnull instancetype)initWithFont:(UIFont * _Nonnull)font size:(CGFloat)size letterSpacing:(CGFloat)letterSpacing color:(UIColor * _Nonnull)color OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Customizable text styles for various classes of text.
SWIFT_CLASS("_TtC5ASAPP15ASAPPTextStyles")
@interface ASAPPTextStyles : NSObject
/// The style of the navigation bar title.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull navTitle;
/// The style of navigation bar buttons.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull navButton;
/// The style of the predictive view title. See <code>ASAPPStrings.predictiveTitle</code>.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull predictiveHeader;
/// The style of top-level headers.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull header1;
/// The style of second-level headers.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull header2;
/// The style of subheaders.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull subheader;
/// The style of body text.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull body;
/// The style of bold body text.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull bodyBold;
/// The style of top-level detail text.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull detail1;
/// The style of second-level detail text.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull detail2;
/// The style of error text.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull error;
/// The text style of buttons.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull button;
/// The style of links.
@property (nonatomic, strong) ASAPPTextStyle * _Nonnull link;
/// Updates all text styles above with the given font family.
/// \param fontFamily The font family to apply to all text styles. Each text style will use an appropriate weight.
///
- (void)updateStylesFor:(ASAPPFontFamily * _Nonnull)fontFamily;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Holds configuration information pertaining to the current user session.
SWIFT_CLASS("_TtC5ASAPP9ASAPPUser")
@interface ASAPPUser : NSObject
/// Whether the user is anonymous.
@property (nonatomic, readonly) BOOL isAnonymous;
/// Unique identifier for the user.
@property (nonatomic, readonly, copy) NSString * _Nonnull userIdentifier;
/// Reference to context provider given at initialization.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull (^ _Nonnull requestContextProvider)(void);
/// Reference to login handler given at initialization.
@property (nonatomic, readonly, copy) void (^ _Nonnull userLoginHandler)(void (^ _Nonnull)(ASAPPUser * _Nonnull));
/// Creates an <code>ASAPPUser</code> instance.
/// \param userIdentifier A unique <code>String</code> identifier for the user. If <code>nil</code>, the user is anonymous and a special identifier will be automatically generated.
///
/// \param requestContextProvider A function called to provide context information when making requests.
///
/// \param userLoginHandler A function called when the user login action is performed.
///
- (nonnull instancetype)initWithUserIdentifier:(NSString * _Nullable)userIdentifier requestContextProvider:(NSDictionary<NSString *, id> * _Nonnull (^ _Nonnull)(void))requestContextProvider userLoginHandler:(void (^ _Nonnull)(void (^ _Nonnull)(ASAPPUser * _Nonnull)))userLoginHandler OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



@class NSBundle;

/// :nodoc:
SWIFT_CLASS("_TtC5ASAPP19ASAPPViewController")
@interface ASAPPViewController : UIViewController
/// Overrides <code>UIViewController.viewDidLoad()</code>.
- (void)viewDidLoad;
/// Overrides <code>UIViewController.viewWillLayoutSubviews()</code>.
- (void)viewWillLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end












@interface ASAPPViewController (SWIFT_EXTENSION(ASAPP))
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@end


@interface ASAPPViewController (SWIFT_EXTENSION(ASAPP))
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, readonly) UIStatusBarAnimation preferredStatusBarUpdateAnimation;
@end


/// Holds references to optional custom views.
SWIFT_CLASS("_TtC5ASAPP10ASAPPViews")
@interface ASAPPViews : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5ASAPP30ComponentPreviewViewController")
@interface ComponentPreviewViewController : ASAPPViewController
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
- (void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent * _Nullable)event;
@end








SWIFT_CLASS("_TtC5ASAPP30RefreshableTableViewController")
@interface RefreshableTableViewController : ASAPPViewController
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
- (void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent * _Nullable)event;
@end





@class UITableView;
@class UITableViewCell;

@interface RefreshableTableViewController (SWIFT_EXTENSION(ASAPP)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC5ASAPP35TemplateServerIntentsViewController")
@interface TemplateServerIntentsViewController : RefreshableTableViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface TemplateServerIntentsViewController (SWIFT_EXTENSION(ASAPP))
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface TemplateServerIntentsViewController (SWIFT_EXTENSION(ASAPP))
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC5ASAPP35TemplateServerPreviewViewController")
@interface TemplateServerPreviewViewController : RefreshableTableViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface TemplateServerPreviewViewController (SWIFT_EXTENSION(ASAPP))
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface TemplateServerPreviewViewController (SWIFT_EXTENSION(ASAPP))
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end



























SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
