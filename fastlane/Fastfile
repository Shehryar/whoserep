fastlane_version "2.104.0"

default_platform :ios

platform :ios do
  before_all do
    ENV['GYM_WORKSPACE'] = "SDK/ASAPP.xcworkspace"
    TEST_APP_PROJECT = "SDK/ASAPPTest/ASAPPTest.xcodeproj"
    setup_circle_ci
  end

  lane :test do
    scan
  end

  lane :incrementBuildNumber do
    ensure_git_status_clean

    increment_build_number(xcodeproj: TEST_APP_PROJECT)

    commit_version_bump(
      message: "increment build number [skip ci]",
      xcodeproj: TEST_APP_PROJECT
    )
  end

  private_lane :buildAndDistribute do |options|
    match

    groups = (options[:groups] ? options[:groups] : ['asapp'])
    groups = nil if (groups || '').empty?

    emails ||= options[:emails]
    emails = nil if (emails || '').empty?

    incrementBuildNumber

    gym(scheme: 'ASAPPTest')

    crashlytics(
      api_token: ENV['CRASHLYTICS_API_TOKEN'],
      build_secret: ENV['CRASHLYTICS_BUILD_SECRET'],
      groups: groups,
      emails: emails,
      notes: changelog_from_git_commits,
      notifications: true
    )
  end

  lane :cleanTagAndPush do |options|
    current_branch = (options[:branch] ? options[:branch] : "master")

    clean_build_artifacts

    add_git_tag(grouping: "fastlane-builds")

    # push build number commit and new tag to remote
    push_to_git_remote(local_branch: current_branch)
  end

  lane :beta do
    buildAndDistribute

    # copy build directory so CircleCI can save artifacts"
    sh "mkdir -p ~/output/build"
    sh 'cp "$IPA_OUTPUT_PATH" ~/output/build/'
    sh 'cp "$DSYM_OUTPUT_PATH" ~/output/build/'
    
    cleanTagAndPush

    # update develop
    sh "git checkout develop"
    sh "git pull origin develop"
    sh "git merge --ff-only master"
    sh "git push origin develop"
  end

  lane :alpha do |options|
    groups = (options[:groups] ? options[:groups] : ['asapp-ios-alpha'])

    current_branch = git_branch
    UI.user_error!("The current branch is #{current_branch}. An alpha release should only be done from a feature branch.") if ["master", "develop"].include?(current_branch)

    buildAndDistribute(groups: groups, emails: options[:emails])

    cleanTagAndPush(branch: current_branch)
  end

  lane :accessibility_testing do
    alpha(groups: ['accessibility-testing'])
  end

  lane :oneOff do |options|
    emails = options[:emails]
    UI.user_error!("To distribute a one-off alpha build, you must specify at least one email address to receive the build: bundle exec fastlane oneOff emails:foo@example.com,bar@example.com") if emails.to_s.empty?

    alpha(groups: [], emails: emails)
  end
end
