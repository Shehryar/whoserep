# .circleci/config.yml

version: 2

default_env: &default_env
  working_directory: /Users/distiller/output
  environment:
    LANG: "en_US.UTF-8"
    LC_ALL: "en_US.UTF-8"
    XCODE_SCHEME: Tests
    XCODE_WORKSPACE: SDK/ASAPP.xcworkspace
    TZ: "/usr/share/zoneinfo/America/New_York"
  shell: /bin/bash --login -o pipefail

refs:
  git_key: &git_key
    fingerprints:
      - "2a:d0:83:45:1c:03:01:c1:65:a0:48:8c:d9:ae:7e:61"
  restore_gems: &restore_gems
    keys:
      - v1-gems-{{ checksum "Gemfile.lock" }}
      - v1-gems-
  install_gems: &install_gems
    name: Bundle install
    command: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3
  cache_gems: &cache_gems
    key: v1-gems-{{ checksum "Gemfile.lock" }}
    paths:
      - vendor/bundle
  staging_only: &staging_only
    filters:
      branches:
        only:
          - staging
  workspace_root: &workspace_root /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root
  save_workspace: &save_workspace
    name: Persist package
    command: |
      mkdir -p /tmp/workspace/
      rm -rf /tmp/workspace/package
      rm -rf /tmp/workspace/build
      cp -Rf package /tmp/workspace/package
      cp -Rf build /tmp/workspace/ 2>/dev/null || :
  restore_workspace: &restore_workspace
    name: Copy package
    command: |
      rm -rf package
      rm -rf build
      cp -Rf /tmp/workspace/package package
      cp -Rf /tmp/workspace/build build 2>/dev/null || :


jobs:
  build-and-test:
    macos:
      xcode: "10.1.0"
    <<: *default_env
    steps:
      - run:
          name: Set time zone
          command: |
            sudo systemsetup -settimezone "America/New_York"
      - run:
          name: Reset simulators
          command: fastlane snapshot reset_simulators --force
      - run:
          name: Pre-start simulator
          command: xcrun simctl boot "iPhone SE" || true
      - add_ssh_keys: *git_key
      - checkout
      - restore_cache: *restore_gems
      - run: *install_gems
      - save_cache: *cache_gems
      - restore_cache:
          keys:
            - v6-carthage-{{ checksum "SDK/Cartfile.resolved" }}
            - v6-carthage-
      - run:
          name: Carthage update
          command: ( cd SDK && carthage update --cache-builds --platform ios )
      - save_cache:
          key: v6-carthage-{{ checksum "SDK/Cartfile.resolved" }}
          paths:
            - SDK/Carthage/Build
      - run:
          name: Fastlane run tests
          command: bundle exec fastlane test
      - run:
          command: |
            mkdir -p ./scan
            cp ./fastlane/test_output/report.junit ./scan/results.xml
            mkdir -p ./FailureDiffs
            [ -d SDK/Tests/UI\ Tests/FailureDiffs ] && mv SDK/Tests/UI\ Tests/FailureDiffs/* ./FailureDiffs || true
          when: always
      - store_test_results:
          path: ./scan
      - store_artifacts:
          path: ./FailureDiffs

  rc-distribute:
    macos:
      xcode: "10.1.0"
    <<: *default_env
    steps:
      - add_ssh_keys: *git_key
      - checkout
      - restore_cache: *restore_gems
      - run: *install_gems
      - save_cache: *cache_gems
      - run:
          name: Fastlane distribute beta from staging
          command: bundle exec fastlane stagingBeta
      - store_artifacts:
          path: ../Library/Logs/gym/ASAPPTest-ASAPPTest.log
          destination: gym.txt
      - store_artifacts:
          path: ./build/ASAPPTest.ipa
          destination: ASAPPTest.ipa
      - store_artifacts:
          path: ./build/ASAPPTest.app.dSYM.zip
          destination: dSYM.zip

  rc-check-version:
    macos:
      xcode: "10.1.0"
    <<: *default_env
    steps:
      - add_ssh_keys: *git_key
      - checkout
      - restore_cache: *restore_gems
      - run: *install_gems
      - save_cache: *cache_gems
      - run:
          name: Fastlane check version string
          command: bundle exec fastlane checkVersionString
        
  rc-check-docs:
    macos:
      xcode: "10.1.0"
    <<: *default_env
    steps:
      - add_ssh_keys: *git_key
      - checkout
      - restore_cache: *restore_gems
      - run: *install_gems
      - save_cache: *cache_gems
      - run:
          name: Fastlane check documentation
          command: bundle exec fastlane checkDocumentation
      - run: *save_workspace
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - package
            - build

  rc-package:
    macos:
      xcode: "9.4.1"
    <<: *default_env
    steps:
      - add_ssh_keys: *git_key
      - checkout
      - restore_cache: *restore_gems
      - run: *install_gems
      - save_cache: *cache_gems
      - *attach_workspace
      - run: *restore_workspace
      - run:
          name: Fastlane archive framework
          command: bundle exec fastlane archiveFramework
      - run: *save_workspace
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - package
            - build
      - store_artifacts:
          path: ./build

  release:
    macos:
      xcode: "10.1.0"
    <<: *default_env
    steps:
      - add_ssh_keys: *git_key
      - checkout
      - restore_cache: *restore_gems
      - run: *install_gems
      - save_cache: *cache_gems
      - *attach_workspace
      - run: *restore_workspace
      - run:
          name: Fastlane release
          command: bundle exec fastlane release


workflows:
  version: 2
  build-and-test:
    jobs:
      - build-and-test:
          filters:
            branches:
              ignore:
                - master
                - staging
  release-candidate:
    jobs:
      - rc-check-version:
          <<: *staging_only
      - build-and-test:
          requires:
            - rc-check-version
          <<: *staging_only
      - rc-check-docs:
          requires:
            - build-and-test
          <<: *staging_only
      - rc-package:
          requires:
            - rc-check-docs
          <<: *staging_only
      - rc-approval:
          type: approval
          requires:
            - build-and-test
          <<: *staging_only
      - rc-distribute:
          requires:
            - rc-approval
          <<: *staging_only
      - release-approval:
          type: approval
          requires:
            - rc-package
          <<: *staging_only
      - release:
          requires:
            - release-approval
          <<: *staging_only

